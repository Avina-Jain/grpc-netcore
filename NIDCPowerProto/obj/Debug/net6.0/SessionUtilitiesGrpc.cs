// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: session_utilities.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NationalInstruments.Grpc.Device {
  public static partial class SessionUtilities
  {
    static readonly string __ServiceName = "nidevice_grpc.SessionUtilities";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest> __Marshaller_nidevice_grpc_EnumerateDevicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse> __Marshaller_nidevice_grpc_EnumerateDevicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest> __Marshaller_nidevice_grpc_EnumerateInstalledSoftwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse> __Marshaller_nidevice_grpc_EnumerateInstalledSoftwareResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.ReserveRequest> __Marshaller_nidevice_grpc_ReserveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.ReserveRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.ReserveResponse> __Marshaller_nidevice_grpc_ReserveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.ReserveResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.IsReservedByClientRequest> __Marshaller_nidevice_grpc_IsReservedByClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.IsReservedByClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.IsReservedByClientResponse> __Marshaller_nidevice_grpc_IsReservedByClientResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.IsReservedByClientResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.UnreserveRequest> __Marshaller_nidevice_grpc_UnreserveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.UnreserveRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.UnreserveResponse> __Marshaller_nidevice_grpc_UnreserveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.UnreserveResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.ResetServerRequest> __Marshaller_nidevice_grpc_ResetServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.ResetServerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::NationalInstruments.Grpc.Device.ResetServerResponse> __Marshaller_nidevice_grpc_ResetServerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::NationalInstruments.Grpc.Device.ResetServerResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest, global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse> __Method_EnumerateDevices = new grpc::Method<global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest, global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnumerateDevices",
        __Marshaller_nidevice_grpc_EnumerateDevicesRequest,
        __Marshaller_nidevice_grpc_EnumerateDevicesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest, global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse> __Method_EnumerateInstalledSoftware = new grpc::Method<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest, global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnumerateInstalledSoftware",
        __Marshaller_nidevice_grpc_EnumerateInstalledSoftwareRequest,
        __Marshaller_nidevice_grpc_EnumerateInstalledSoftwareResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NationalInstruments.Grpc.Device.ReserveRequest, global::NationalInstruments.Grpc.Device.ReserveResponse> __Method_Reserve = new grpc::Method<global::NationalInstruments.Grpc.Device.ReserveRequest, global::NationalInstruments.Grpc.Device.ReserveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reserve",
        __Marshaller_nidevice_grpc_ReserveRequest,
        __Marshaller_nidevice_grpc_ReserveResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NationalInstruments.Grpc.Device.IsReservedByClientRequest, global::NationalInstruments.Grpc.Device.IsReservedByClientResponse> __Method_IsReservedByClient = new grpc::Method<global::NationalInstruments.Grpc.Device.IsReservedByClientRequest, global::NationalInstruments.Grpc.Device.IsReservedByClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsReservedByClient",
        __Marshaller_nidevice_grpc_IsReservedByClientRequest,
        __Marshaller_nidevice_grpc_IsReservedByClientResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NationalInstruments.Grpc.Device.UnreserveRequest, global::NationalInstruments.Grpc.Device.UnreserveResponse> __Method_Unreserve = new grpc::Method<global::NationalInstruments.Grpc.Device.UnreserveRequest, global::NationalInstruments.Grpc.Device.UnreserveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unreserve",
        __Marshaller_nidevice_grpc_UnreserveRequest,
        __Marshaller_nidevice_grpc_UnreserveResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::NationalInstruments.Grpc.Device.ResetServerRequest, global::NationalInstruments.Grpc.Device.ResetServerResponse> __Method_ResetServer = new grpc::Method<global::NationalInstruments.Grpc.Device.ResetServerRequest, global::NationalInstruments.Grpc.Device.ResetServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetServer",
        __Marshaller_nidevice_grpc_ResetServerRequest,
        __Marshaller_nidevice_grpc_ResetServerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NationalInstruments.Grpc.Device.SessionUtilitiesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SessionUtilities</summary>
    [grpc::BindServiceMethod(typeof(SessionUtilities), "BindService")]
    public abstract partial class SessionUtilitiesBase
    {
      /// <summary>
      /// Provides a list of devices or chassis connected to server under localhost
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse> EnumerateDevices(global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Provides a list of NI software installed on server under localhost
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse> EnumerateInstalledSoftware(global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reserve a set of client defined resources for exclusive use
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NationalInstruments.Grpc.Device.ReserveResponse> Reserve(global::NationalInstruments.Grpc.Device.ReserveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Determines if a set of client defined resources is currently reserved by a
      /// specific client
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NationalInstruments.Grpc.Device.IsReservedByClientResponse> IsReservedByClient(global::NationalInstruments.Grpc.Device.IsReservedByClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unreserves a previously reserved resource
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NationalInstruments.Grpc.Device.UnreserveResponse> Unreserve(global::NationalInstruments.Grpc.Device.UnreserveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resets the server to a default state with no open sessions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::NationalInstruments.Grpc.Device.ResetServerResponse> ResetServer(global::NationalInstruments.Grpc.Device.ResetServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SessionUtilities</summary>
    public partial class SessionUtilitiesClient : grpc::ClientBase<SessionUtilitiesClient>
    {
      /// <summary>Creates a new client for SessionUtilities</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SessionUtilitiesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SessionUtilities that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SessionUtilitiesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SessionUtilitiesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SessionUtilitiesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Provides a list of devices or chassis connected to server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse EnumerateDevices(global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnumerateDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provides a list of devices or chassis connected to server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse EnumerateDevices(global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnumerateDevices, null, options, request);
      }
      /// <summary>
      /// Provides a list of devices or chassis connected to server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse> EnumerateDevicesAsync(global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnumerateDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provides a list of devices or chassis connected to server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse> EnumerateDevicesAsync(global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnumerateDevices, null, options, request);
      }
      /// <summary>
      /// Provides a list of NI software installed on server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse EnumerateInstalledSoftware(global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnumerateInstalledSoftware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provides a list of NI software installed on server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse EnumerateInstalledSoftware(global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnumerateInstalledSoftware, null, options, request);
      }
      /// <summary>
      /// Provides a list of NI software installed on server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse> EnumerateInstalledSoftwareAsync(global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnumerateInstalledSoftwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provides a list of NI software installed on server under localhost
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse> EnumerateInstalledSoftwareAsync(global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnumerateInstalledSoftware, null, options, request);
      }
      /// <summary>
      /// Reserve a set of client defined resources for exclusive use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.ReserveResponse Reserve(global::NationalInstruments.Grpc.Device.ReserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Reserve(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reserve a set of client defined resources for exclusive use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.ReserveResponse Reserve(global::NationalInstruments.Grpc.Device.ReserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reserve, null, options, request);
      }
      /// <summary>
      /// Reserve a set of client defined resources for exclusive use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.ReserveResponse> ReserveAsync(global::NationalInstruments.Grpc.Device.ReserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReserveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reserve a set of client defined resources for exclusive use
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.ReserveResponse> ReserveAsync(global::NationalInstruments.Grpc.Device.ReserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reserve, null, options, request);
      }
      /// <summary>
      /// Determines if a set of client defined resources is currently reserved by a
      /// specific client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.IsReservedByClientResponse IsReservedByClient(global::NationalInstruments.Grpc.Device.IsReservedByClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsReservedByClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Determines if a set of client defined resources is currently reserved by a
      /// specific client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.IsReservedByClientResponse IsReservedByClient(global::NationalInstruments.Grpc.Device.IsReservedByClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsReservedByClient, null, options, request);
      }
      /// <summary>
      /// Determines if a set of client defined resources is currently reserved by a
      /// specific client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.IsReservedByClientResponse> IsReservedByClientAsync(global::NationalInstruments.Grpc.Device.IsReservedByClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsReservedByClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Determines if a set of client defined resources is currently reserved by a
      /// specific client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.IsReservedByClientResponse> IsReservedByClientAsync(global::NationalInstruments.Grpc.Device.IsReservedByClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsReservedByClient, null, options, request);
      }
      /// <summary>
      /// Unreserves a previously reserved resource
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.UnreserveResponse Unreserve(global::NationalInstruments.Grpc.Device.UnreserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unreserve(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unreserves a previously reserved resource
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.UnreserveResponse Unreserve(global::NationalInstruments.Grpc.Device.UnreserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unreserve, null, options, request);
      }
      /// <summary>
      /// Unreserves a previously reserved resource
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.UnreserveResponse> UnreserveAsync(global::NationalInstruments.Grpc.Device.UnreserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnreserveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unreserves a previously reserved resource
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.UnreserveResponse> UnreserveAsync(global::NationalInstruments.Grpc.Device.UnreserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unreserve, null, options, request);
      }
      /// <summary>
      /// Resets the server to a default state with no open sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.ResetServerResponse ResetServer(global::NationalInstruments.Grpc.Device.ResetServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets the server to a default state with no open sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::NationalInstruments.Grpc.Device.ResetServerResponse ResetServer(global::NationalInstruments.Grpc.Device.ResetServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetServer, null, options, request);
      }
      /// <summary>
      /// Resets the server to a default state with no open sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.ResetServerResponse> ResetServerAsync(global::NationalInstruments.Grpc.Device.ResetServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets the server to a default state with no open sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::NationalInstruments.Grpc.Device.ResetServerResponse> ResetServerAsync(global::NationalInstruments.Grpc.Device.ResetServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetServer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SessionUtilitiesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SessionUtilitiesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SessionUtilitiesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_EnumerateDevices, serviceImpl.EnumerateDevices)
          .AddMethod(__Method_EnumerateInstalledSoftware, serviceImpl.EnumerateInstalledSoftware)
          .AddMethod(__Method_Reserve, serviceImpl.Reserve)
          .AddMethod(__Method_IsReservedByClient, serviceImpl.IsReservedByClient)
          .AddMethod(__Method_Unreserve, serviceImpl.Unreserve)
          .AddMethod(__Method_ResetServer, serviceImpl.ResetServer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SessionUtilitiesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_EnumerateDevices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NationalInstruments.Grpc.Device.EnumerateDevicesRequest, global::NationalInstruments.Grpc.Device.EnumerateDevicesResponse>(serviceImpl.EnumerateDevices));
      serviceBinder.AddMethod(__Method_EnumerateInstalledSoftware, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareRequest, global::NationalInstruments.Grpc.Device.EnumerateInstalledSoftwareResponse>(serviceImpl.EnumerateInstalledSoftware));
      serviceBinder.AddMethod(__Method_Reserve, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NationalInstruments.Grpc.Device.ReserveRequest, global::NationalInstruments.Grpc.Device.ReserveResponse>(serviceImpl.Reserve));
      serviceBinder.AddMethod(__Method_IsReservedByClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NationalInstruments.Grpc.Device.IsReservedByClientRequest, global::NationalInstruments.Grpc.Device.IsReservedByClientResponse>(serviceImpl.IsReservedByClient));
      serviceBinder.AddMethod(__Method_Unreserve, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NationalInstruments.Grpc.Device.UnreserveRequest, global::NationalInstruments.Grpc.Device.UnreserveResponse>(serviceImpl.Unreserve));
      serviceBinder.AddMethod(__Method_ResetServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NationalInstruments.Grpc.Device.ResetServerRequest, global::NationalInstruments.Grpc.Device.ResetServerResponse>(serviceImpl.ResetServer));
    }

  }
}
#endregion
